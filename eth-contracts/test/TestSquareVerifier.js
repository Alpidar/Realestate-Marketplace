// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require("Verifier");
const proof = require(`../../zokrates/code/square/proof`);

contract("Verifier", (accounts) => {
  const account_one = accounts[0];

  beforeEach(async function () {
    this.contract = await Verifier.new({ from: account_one });
  });
  // Test verification with correct proof
  // - use the contents from proof.json generated from zokrates steps
  it("Test verification with correct proof", async function () {
    let result = await this.contract.verifyTx.call(
      proof.proof.A,
      proof.proof.A_p,
      proof.proof.B,
      proof.proof.B_p,
      proof.proof.C,
      proof.proof.C_p,
      proof.proof.H,
      proof.proof.K,
      proof.input,
      { from: account_one }
    );
    assert(result);
  });

  // Test verification with incorrect proof
  it("Test verification with incorrect proof", async function () {
    let result = await this.contract.verifyTx.call(
      proof.proof.A,
      proof.proof.A_p,
      proof.proof.B,
      proof.proof.B_p,
      proof.proof.C,
      proof.proof.C_p,
      proof.proof.H,
      proof.proof.K,
      [0, 0]
    );
    assert.equal(result, false);
  });
});
